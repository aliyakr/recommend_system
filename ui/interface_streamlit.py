import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
root_path = Path(__file__).resolve().parent.parent
if str(root_path) not in sys.path:
    sys.path.append(str(root_path))

import streamlit as st
import json
from logic.decision_engine import evaluate_profile
from recommendations.descriptions import get_method_description

st.set_page_config(page_title="–°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", page_icon="üéì")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    try:
        with open("data/users.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []

USERS = load_users()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
defaults = {
    "step": 0,
    "role": None,
    "group_id": "",
    "user_key": "",
    "profile": {},
    "student_answers": {},
    "go_next": False,
}
for key, val in defaults.items():
    if key not in st.session_state:
        st.session_state[key] = val

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
page = st.empty()

# ===== –®–∞–≥ 0: –≤—ã–±–æ—Ä —Ä–æ–ª–∏ =====
def show_role_selection():
    with page.container():
        st.title("–°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –º–µ—Ç–æ–¥–∞–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è")
        st.markdown("### –ö—Ç–æ –≤—ã?")
        role_label = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å", ["–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", "–°—Ç—É–¥–µ–Ω—Ç"], key="role_radio")
        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
            st.session_state.role = "teacher" if role_label == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" else "student"
            st.session_state.step = 1
            st.rerun()

# ===== –®–∞–≥ 1: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è =====
def show_login():
    with page.container():
        role_label = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" if st.session_state.role == "teacher" else "–°—Ç—É–¥–µ–Ω—Ç"
        st.title("–°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –º–µ—Ç–æ–¥–∞–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è")
        st.markdown(f"### –í—Ö–æ–¥ ({role_label})")
        st.info(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: **{role_label}**")

        st.text_input("–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã", key="group_id")
        st.text_input("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–ª—é—á", type="password", key="user_key")

        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
            group = st.session_state.group_id.strip().lower()
            key = st.session_state.user_key.strip().lower()
            role = st.session_state.role

            match = next((u for u in USERS if u["group_id"].strip().lower() == group and u["user_key"].strip().lower() == key and u["role"] == role), None)

            if match:
                st.session_state.pop("group_id", None)
                st.session_state.pop("user_key", None)
                st.session_state.step = 2
                st.rerun()
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∏–ª–∏ –≥—Ä—É–ø–ø–∞.")

# ===== –®–∞–≥–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è =====
def show_teacher_survey():
    steps = [
        ("discipline_type", "–¢–∏–ø –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", ["–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è", "–ü—Ä–∞–∫—Ç–∏–∫–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", "–°–º–µ—à–∞–Ω–Ω–∞—è"]),
        ("format", "–§–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è", ["–û—á–Ω–æ", "–û–Ω–ª–∞–π–Ω"]),
        ("engagement_level", "–£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", ["–í—ã—Å–æ–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ù–∏–∑–∫–∞—è"]),
        ("attendance", "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å", ["‚â• 75%", "< 75%"]),
        ("group_activity", "–ï—Å—Ç—å –≥—Ä—É–ø–ø–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ LMS?", [True, False]),
        ("motivation", "–£—Ä–æ–≤–µ–Ω—å –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", (1.0, 5.0)),
        ("digital_literacy_students", "–¶–∏—Ñ—Ä–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", ["–í—ã—Å–æ–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ù–∏–∑–∫–∞—è"]),
        ("average_score", "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", (2.0, 5.0)),
        ("anxiety_level", "–£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", (1.0, 5.0)),
        ("teacher_changed_recently", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–ª—Å—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–µ–º–µ—Å—Ç—Ä–∞?", [True, False]),
    ]
    current_step = st.session_state.step - 2

    with page.container():
        if current_step < len(steps):
            field_key, label, options = steps[current_step]
            st.markdown(f"### –í–æ–ø—Ä–æ—Å {current_step + 1} –∏–∑ {len(steps)}")

            if not st.session_state.go_next:
                if isinstance(options, list):
                    st.selectbox(label, options, key=field_key)
                elif isinstance(options, tuple):
                    st.slider(label, options[0], options[1], (options[0] + options[1]) / 2, key=field_key)

                if st.button("–î–∞–ª–µ–µ"):
                    st.session_state.profile[field_key] = st.session_state[field_key]
                    st.session_state.go_next = True
                    st.rerun()
            else:
                st.session_state.step += 1
                st.session_state.go_next = False
                st.rerun()
        else:
            st.markdown("### –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:")
            for k, v in st.session_state.profile.items():
                st.write(f"**{k}**: {v}")

            method = evaluate_profile(st.session_state.profile)
            st.success(f"üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è: **{method}**")
            desc = get_method_description(method)
            if desc:
                st.markdown(f"üìñ **–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞:** {desc}")

            if st.button("–°–±—Ä–æ—Å–∏—Ç—å"):
                st.session_state.step = 0
                st.session_state.profile = {}
                st.session_state.go_next = False
                st.session_state.pop("group_id", None)
                st.session_state.pop("user_key", None)
                st.rerun()

# ===== –®–∞–≥–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ =====
def show_student_survey():
    steps = [
        ("course_name", "–ö–∞–∫–æ–π –∫—É—Ä—Å –∏–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –≤—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ?", "text"),
        ("clarity", "–ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω—ã –≤–∞–º —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è?", "slider"),
        ("difficult_topics", "–ö–∞–∫–∏–µ —Ç–µ–º—ã –≤ –∫—É—Ä—Å–µ –∫–∞–∂—É—Ç—Å—è –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º–∏?", "text"),
        ("attendance", "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø–æ—Å–µ—â–∞–µ—Ç–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ?", "select", ["–í—Å–µ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–†–µ–¥–∫–æ", "–ü–æ—á—Ç–∏ –Ω–µ —Ö–æ–∂—É"]),
        ("lms_activity", "–ù–∞—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ LMS?", "slider"),
        ("deadline_respect", "–°–¥–∞—ë—Ç–µ –ª–∏ –≤—ã –∑–∞–¥–∞–Ω–∏—è –≤ —Å—Ä–æ–∫?", "select", ["–í—Å–µ–≥–¥–∞", "–ò–Ω–æ–≥–¥–∞", "–†–µ–¥–∫–æ", "–ù–µ —Å–¥–∞—é"]),
        ("extra_materials", "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –≤—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã?", "select", ["–î–∞", "–ò–Ω–æ–≥–¥–∞", "–ù–µ—Ç"]),
        ("format_interest", "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω —Ç–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è?", "slider"),
        ("preferred_task_type", "–ö–∞–∫–æ–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–µ–Ω?", "select", ["–¢–µ—Å—Ç—ã", "–ü—Ä–æ–µ–∫—Ç—ã", "–≠—Å—Å–µ", "–£—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"]),
        ("barriers", "–ß—Ç–æ –º–µ—à–∞–µ—Ç –≤–∞–º —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–∞–∏–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª?", "text_area")
    ]
    current_step = st.session_state.step - 2

    with page.container():
        if current_step < len(steps):
            q_key, label, input_type, *opts = steps[current_step]
            st.markdown(f"### –í–æ–ø—Ä–æ—Å {current_step + 1} –∏–∑ {len(steps)}")

            if input_type == "text":
                st.text_input(label, key=q_key)
            elif input_type == "text_area":
                st.text_area(label, key=q_key)
            elif input_type == "slider":
                st.slider(label, 1, 5, 3, key=q_key)
            elif input_type == "select":
                st.selectbox(label, opts[0], key=q_key)

            if st.button("–î–∞–ª–µ–µ"):
                st.session_state.student_answers[q_key] = st.session_state[q_key]
                st.session_state.step += 1
                st.rerun()
        else:
            st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç —É—á—Ç—ë–Ω –ø—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–º —É–ª—É—á—à–µ–Ω–∏–∏ –∫—É—Ä—Å–∞.")
            st.write("**–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:**")
            for k, v in st.session_state.student_answers.items():
                st.write(f"**{k}**: {v}")

            if st.button("–ó–∞–≤–µ—Ä—à–∏—Ç—å"):
                st.session_state.step = 0
                st.session_state.role = None
                st.session_state.student_answers = {}
                st.session_state.pop("group_id", None)
                st.session_state.pop("user_key", None)
                st.rerun()

# ===== –†–æ—É—Ç–∏–Ω–≥ =====
if st.session_state.step == 0:
    show_role_selection()
elif st.session_state.step == 1:
    show_login()
else:
    if st.session_state.role == "teacher":
        show_teacher_survey()
    else:
        show_student_survey()